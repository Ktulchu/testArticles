{
	"info": {
		"_postman_id": "4a5e8fb4-4e4f-4011-ba72-69785643c0f2",
		"name": "Articles",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29617329"
	},
	"item": [
		{
			"name": "Articles",
			"item": [
				{
					"name": "Index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/articles/?union[]=author&union[]=categories&page=2&authorId=1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"articles",
								""
							],
							"query": [
								{
									"key": "union[]",
									"value": "author",
									"description": "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–≤—Ç–æ—Ä—É"
								},
								{
									"key": "union[]",
									"value": "categories",
									"description": "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
								},
								{
									"key": "page",
									"value": "2",
									"description": "‚Ññ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
								},
								{
									"key": "id",
									"value": "1",
									"description": "—Ñ–∏–ª—å—Ç—Ä –ø–æ Id (dataProvider)",
									"disabled": true
								},
								{
									"key": "categoryId",
									"value": "2",
									"description": "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (dataProvider)",
									"disabled": true
								},
								{
									"key": "name",
									"value": "php",
									"description": "–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (dataProvider)",
									"disabled": true
								},
								{
									"key": "authorId",
									"value": "1",
									"description": "—Ñ–∏–ª—å—Ä –ø–æ –∞–≤—Ç–æ—Ä—É (dataProvider)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "View",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/articles/view/?id=1&union[]=author",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"articles",
								"view",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"description": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
								},
								{
									"key": "union[]",
									"value": "author",
									"description": "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–∑—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–≤—Ç–æ—Ä—É"
								},
								{
									"key": "union[]",
									"value": "categories",
									"description": "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–Ω–∞–±–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–≤—Ö –ø–æ —Å—Ç–∞—Ç—å—è–º**\n\n–º–µ—Ç–æ–¥ **view** –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n\n–ø–µ—Ä–≤—ã–π: int id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π\n\n–≤—Ç–æ—Ä–æ–π: array –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤ –Ω–µ–º –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤—è–∑–µ–π\n\n- –∞uthor - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∞–≤—Ç–æ—Ä–µ —Å—Ç–∞—Ç—å–∏\n    \n- —Åategories - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n    \n\n–†–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ $dataProvider"
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/index?union[]=articles",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"index"
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								},
								{
									"key": "parentId",
									"value": "2",
									"disabled": true
								},
								{
									"key": "union[]",
									"value": "articles"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "View",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/view?id=2&union[]=articles",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"view"
							],
							"query": [
								{
									"key": "id",
									"value": "2"
								},
								{
									"key": "union[]",
									"value": "articles"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tree",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/category/tree",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"category",
								"tree"
							]
						}
					},
					"response": []
				}
			],
			"description": "–ß–µ—Ä–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:\n\n- —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,\n    \n- –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n    \n- –î—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n    \n\n–†–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ $dataProvider"
		},
		{
			"name": "Author",
			"item": [
				{
					"name": "index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/author/index",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"author",
								"index"
							]
						}
					},
					"response": []
				},
				{
					"name": "view",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"description": "–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ø—Ä–µ–¥–∏–¥—É—â–∏–º–∏"
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "12345678",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}